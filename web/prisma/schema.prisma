generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./tournament.sqlite"
}

model Group {
  id      Int      @id @default(autoincrement())
  name    String   @unique
  players Player[]
  matches Match[]
}

model Player {
  id          Int      @id @default(autoincrement())
  fullName    String
  dept        String?
  groupId     Int
  group       Group    @relation(fields: [groupId], references: [id])
  homeMatches Match[]  @relation("home")
  awayMatches Match[]  @relation("away")
}

enum MatchStatus {
  SCHEDULED
  DONE
}

model Match {
  id        Int       @id @default(autoincrement())
  groupId   Int
  group     Group     @relation(fields: [groupId], references: [id])

  homeId    Int
  home      Player    @relation("home", fields: [homeId], references: [id])
  awayId    Int
  away      Player    @relation("away", fields: [awayId], references: [id])

  gHome     Int?
  gAway     Int?
  kickOff   DateTime?
  status    MatchStatus @default(SCHEDULED)
  week      Int?
}
enum MediaType {
  IMAGE
  VIDEO
}

model Report {
  id            Int       @id @default(autoincrement())
  slug          String    @unique
  title         String
  summary       String?
  content       String?
  medias        Media[]
  likes         Like[]
  comments      Comment[]
  likesCount    Int       @default(0)
  commentsCount Int       @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Media {
  id        Int       @id @default(autoincrement())
  report    Report    @relation(fields: [reportId], references: [id], onDelete: Cascade)
  reportId  Int
  type      MediaType @default(IMAGE)
  url       String
  width     Int?
  height    Int?
  duration  Int?
  createdAt DateTime  @default(now())
}

model Like {
  id         Int     @id @default(autoincrement())
  reportId   Int
  report     Report  @relation(fields: [reportId], references: [id])
  fingerprint String  // از کوکی+IP هش می‌سازیم
  createdAt  DateTime @default(now())

  @@unique([reportId, fingerprint])
}

model Comment {
  id         Int        @id @default(autoincrement())
  reportId   Int
  report     Report     @relation(fields: [reportId], references: [id])
  author     String?
  content    String
  createdAt  DateTime   @default(now())
  approved   Boolean    @default(true)

  parentId   Int?
  parent     Comment?   @relation("CommentReplies", fields: [parentId], references: [id])
  replies    Comment[]  @relation("CommentReplies")
}
model User {
  id           Int      @id @default(autoincrement())
  username     String   @unique
  passwordHash String
  role         String   @default("user") // "admin" یا "user"
  createdAt    DateTime @default(now())
  sessions     Session[]
}

model Session {
  id        String   @id @default(uuid())
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  expiresAt DateTime // مثلاً 7 روز بعد؛ در کد ست می‌کنیم
}